{"ast":null,"code":"'use strict';\n\nvar callBound = require('call-bound');\nvar $toString = callBound('Object.prototype.toString');\nvar hasSymbols = require('has-symbols')();\nvar safeRegexTest = require('safe-regex-test');\nif (hasSymbols) {\n  var $symToStr = callBound('Symbol.prototype.toString');\n  var isSymString = safeRegexTest(/^Symbol\\(.*\\)$/);\n\n  /** @type {(value: object) => value is Symbol} */\n  var isSymbolObject = function isRealSymbolObject(value) {\n    if (typeof value.valueOf() !== 'symbol') {\n      return false;\n    }\n    return isSymString($symToStr(value));\n  };\n\n  /** @type {import('.')} */\n  module.exports = function isSymbol(value) {\n    if (typeof value === 'symbol') {\n      return true;\n    }\n    if (!value || typeof value !== 'object' || $toString(value) !== '[object Symbol]') {\n      return false;\n    }\n    try {\n      return isSymbolObject(value);\n    } catch (e) {\n      return false;\n    }\n  };\n} else {\n  /** @type {import('.')} */\n  module.exports = function isSymbol(value) {\n    // this environment does not support Symbols.\n    return false && value;\n  };\n}","map":{"version":3,"names":["callBound","require","$toString","hasSymbols","safeRegexTest","$symToStr","isSymString","isSymbolObject","isRealSymbolObject","value","valueOf","module","exports","isSymbol","e"],"sources":["C:/Users/luca/OneDrive/Berufsschule/TBZ/m450/24.10/recipe-planner-fronend-and-backend/recipe-planner-fronend/node_modules/is-symbol/index.js"],"sourcesContent":["'use strict';\n\nvar callBound = require('call-bound');\nvar $toString = callBound('Object.prototype.toString');\nvar hasSymbols = require('has-symbols')();\nvar safeRegexTest = require('safe-regex-test');\n\nif (hasSymbols) {\n\tvar $symToStr = callBound('Symbol.prototype.toString');\n\tvar isSymString = safeRegexTest(/^Symbol\\(.*\\)$/);\n\n\t/** @type {(value: object) => value is Symbol} */\n\tvar isSymbolObject = function isRealSymbolObject(value) {\n\t\tif (typeof value.valueOf() !== 'symbol') {\n\t\t\treturn false;\n\t\t}\n\t\treturn isSymString($symToStr(value));\n\t};\n\n\t/** @type {import('.')} */\n\tmodule.exports = function isSymbol(value) {\n\t\tif (typeof value === 'symbol') {\n\t\t\treturn true;\n\t\t}\n\t\tif (!value || typeof value !== 'object' || $toString(value) !== '[object Symbol]') {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\treturn isSymbolObject(value);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n} else {\n\t/** @type {import('.')} */\n\tmodule.exports = function isSymbol(value) {\n\t\t// this environment does not support Symbols.\n\t\treturn false && value;\n\t};\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;AACrC,IAAIC,SAAS,GAAGF,SAAS,CAAC,2BAA2B,CAAC;AACtD,IAAIG,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;AACzC,IAAIG,aAAa,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAE9C,IAAIE,UAAU,EAAE;EACf,IAAIE,SAAS,GAAGL,SAAS,CAAC,2BAA2B,CAAC;EACtD,IAAIM,WAAW,GAAGF,aAAa,CAAC,gBAAgB,CAAC;;EAEjD;EACA,IAAIG,cAAc,GAAG,SAASC,kBAAkBA,CAACC,KAAK,EAAE;IACvD,IAAI,OAAOA,KAAK,CAACC,OAAO,CAAC,CAAC,KAAK,QAAQ,EAAE;MACxC,OAAO,KAAK;IACb;IACA,OAAOJ,WAAW,CAACD,SAAS,CAACI,KAAK,CAAC,CAAC;EACrC,CAAC;;EAED;EACAE,MAAM,CAACC,OAAO,GAAG,SAASC,QAAQA,CAACJ,KAAK,EAAE;IACzC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC9B,OAAO,IAAI;IACZ;IACA,IAAI,CAACA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIP,SAAS,CAACO,KAAK,CAAC,KAAK,iBAAiB,EAAE;MAClF,OAAO,KAAK;IACb;IACA,IAAI;MACH,OAAOF,cAAc,CAACE,KAAK,CAAC;IAC7B,CAAC,CAAC,OAAOK,CAAC,EAAE;MACX,OAAO,KAAK;IACb;EACD,CAAC;AACF,CAAC,MAAM;EACN;EACAH,MAAM,CAACC,OAAO,GAAG,SAASC,QAAQA,CAACJ,KAAK,EAAE;IACzC;IACA,OAAO,KAAK,IAAIA,KAAK;EACtB,CAAC;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}